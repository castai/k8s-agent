// Code generated by MockGen. DO NOT EDIT.
// Source: discovery.go

// Package mock_discovery is a generated GoMock package.
package mock_discovery

import (
	cloud "castai-agent/pkg/cloud"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	logrus "github.com/sirupsen/logrus"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetCSPAndRegion mocks base method.
func (m *MockService) GetCSPAndRegion(ctx context.Context) (cloud.Cloud, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSPAndRegion", ctx)
	ret0, _ := ret[0].(cloud.Cloud)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCSPAndRegion indicates an expected call of GetCSPAndRegion.
func (mr *MockServiceMockRecorder) GetCSPAndRegion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPAndRegion", reflect.TypeOf((*MockService)(nil).GetCSPAndRegion), ctx)
}

// GetClusterID mocks base method.
func (m *MockService) GetClusterID(ctx context.Context) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterID", ctx)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterID indicates an expected call of GetClusterID.
func (mr *MockServiceMockRecorder) GetClusterID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterID", reflect.TypeOf((*MockService)(nil).GetClusterID), ctx)
}

// GetKOPSClusterNameAndStateStore mocks base method.
func (m *MockService) GetKOPSClusterNameAndStateStore(ctx context.Context, log logrus.FieldLogger) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKOPSClusterNameAndStateStore", ctx, log)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKOPSClusterNameAndStateStore indicates an expected call of GetKOPSClusterNameAndStateStore.
func (mr *MockServiceMockRecorder) GetKOPSClusterNameAndStateStore(ctx, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKOPSClusterNameAndStateStore", reflect.TypeOf((*MockService)(nil).GetKOPSClusterNameAndStateStore), ctx, log)
}

// GetOpenshiftClusterID mocks base method.
func (m *MockService) GetOpenshiftClusterID(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenshiftClusterID", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenshiftClusterID indicates an expected call of GetOpenshiftClusterID.
func (mr *MockServiceMockRecorder) GetOpenshiftClusterID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenshiftClusterID", reflect.TypeOf((*MockService)(nil).GetOpenshiftClusterID), ctx)
}

// GetOpenshiftClusterName mocks base method.
func (m *MockService) GetOpenshiftClusterName(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenshiftClusterName", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenshiftClusterName indicates an expected call of GetOpenshiftClusterName.
func (mr *MockServiceMockRecorder) GetOpenshiftClusterName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenshiftClusterName", reflect.TypeOf((*MockService)(nil).GetOpenshiftClusterName), ctx)
}
