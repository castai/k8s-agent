// Code generated by MockGen. DO NOT EDIT.
// Source: process.go

// Package mock_monitor is a generated GoMock package.
package mock_monitor

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProcessInfo is a mock of ProcessInfo interface.
type MockProcessInfo struct {
	ctrl     *gomock.Controller
	recorder *MockProcessInfoMockRecorder
}

// MockProcessInfoMockRecorder is the mock recorder for MockProcessInfo.
type MockProcessInfoMockRecorder struct {
	mock *MockProcessInfo
}

// NewMockProcessInfo creates a new mock instance.
func NewMockProcessInfo(ctrl *gomock.Controller) *MockProcessInfo {
	mock := &MockProcessInfo{ctrl: ctrl}
	mock.recorder = &MockProcessInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessInfo) EXPECT() *MockProcessInfoMockRecorder {
	return m.recorder
}

// GetProcessStartTime mocks base method.
func (m *MockProcessInfo) GetProcessStartTime(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessStartTime", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessStartTime indicates an expected call of GetProcessStartTime.
func (mr *MockProcessInfoMockRecorder) GetProcessStartTime(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessStartTime", reflect.TypeOf((*MockProcessInfo)(nil).GetProcessStartTime), ctx)
}
