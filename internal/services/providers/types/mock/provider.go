// Code generated by MockGen. DO NOT EDIT.
// Source: castai-agent/internal/services/providers/types (interfaces: Provider)

// Package mock_types is a generated GoMock package.
package mock_types

import (
	castai "castai-agent/internal/castai"
	types "castai-agent/internal/services/providers/types"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// IsSpot mocks base method.
func (m *MockProvider) IsSpot(arg0 context.Context, arg1 *v1.Node) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSpot", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSpot indicates an expected call of IsSpot.
func (mr *MockProviderMockRecorder) IsSpot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSpot", reflect.TypeOf((*MockProvider)(nil).IsSpot), arg0, arg1)
}

// Name mocks base method.
func (m *MockProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProvider)(nil).Name))
}

// RegisterCluster mocks base method.
func (m *MockProvider) RegisterCluster(arg0 context.Context, arg1 castai.Client) (*types.ClusterRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCluster", arg0, arg1)
	ret0, _ := ret[0].(*types.ClusterRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCluster indicates an expected call of RegisterCluster.
func (mr *MockProviderMockRecorder) RegisterCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCluster", reflect.TypeOf((*MockProvider)(nil).RegisterCluster), arg0, arg1)
}
