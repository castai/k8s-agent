// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package workqueue

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockInterface
func (_mock *MockInterface) Add(item any) {
	_mock.Called(item)
	return
}

// MockInterface_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockInterface_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - item any
func (_e *MockInterface_Expecter) Add(item interface{}) *MockInterface_Add_Call {
	return &MockInterface_Add_Call{Call: _e.mock.On("Add", item)}
}

func (_c *MockInterface_Add_Call) Run(run func(item any)) *MockInterface_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_Add_Call) Return() *MockInterface_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_Add_Call) RunAndReturn(run func(item any)) *MockInterface_Add_Call {
	_c.Run(run)
	return _c
}

// Done provides a mock function for the type MockInterface
func (_mock *MockInterface) Done(item any) {
	_mock.Called(item)
	return
}

// MockInterface_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockInterface_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
//   - item any
func (_e *MockInterface_Expecter) Done(item interface{}) *MockInterface_Done_Call {
	return &MockInterface_Done_Call{Call: _e.mock.On("Done", item)}
}

func (_c *MockInterface_Done_Call) Run(run func(item any)) *MockInterface_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_Done_Call) Return() *MockInterface_Done_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_Done_Call) RunAndReturn(run func(item any)) *MockInterface_Done_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function for the type MockInterface
func (_mock *MockInterface) Get() (any, bool) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 any
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func() (any, bool)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() bool); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockInterface_Expecter) Get() *MockInterface_Get_Call {
	return &MockInterface_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockInterface_Get_Call) Run(run func()) *MockInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_Get_Call) Return(item any, shutdown bool) *MockInterface_Get_Call {
	_c.Call.Return(item, shutdown)
	return _c
}

func (_c *MockInterface_Get_Call) RunAndReturn(run func() (any, bool)) *MockInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function for the type MockInterface
func (_mock *MockInterface) Len() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockInterface_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type MockInterface_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *MockInterface_Expecter) Len() *MockInterface_Len_Call {
	return &MockInterface_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *MockInterface_Len_Call) Run(run func()) *MockInterface_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_Len_Call) Return(n int) *MockInterface_Len_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockInterface_Len_Call) RunAndReturn(run func() int) *MockInterface_Len_Call {
	_c.Call.Return(run)
	return _c
}

// ShutDown provides a mock function for the type MockInterface
func (_mock *MockInterface) ShutDown() {
	_mock.Called()
	return
}

// MockInterface_ShutDown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutDown'
type MockInterface_ShutDown_Call struct {
	*mock.Call
}

// ShutDown is a helper method to define mock.On call
func (_e *MockInterface_Expecter) ShutDown() *MockInterface_ShutDown_Call {
	return &MockInterface_ShutDown_Call{Call: _e.mock.On("ShutDown")}
}

func (_c *MockInterface_ShutDown_Call) Run(run func()) *MockInterface_ShutDown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_ShutDown_Call) Return() *MockInterface_ShutDown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_ShutDown_Call) RunAndReturn(run func()) *MockInterface_ShutDown_Call {
	_c.Run(run)
	return _c
}

// ShutDownWithDrain provides a mock function for the type MockInterface
func (_mock *MockInterface) ShutDownWithDrain() {
	_mock.Called()
	return
}

// MockInterface_ShutDownWithDrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutDownWithDrain'
type MockInterface_ShutDownWithDrain_Call struct {
	*mock.Call
}

// ShutDownWithDrain is a helper method to define mock.On call
func (_e *MockInterface_Expecter) ShutDownWithDrain() *MockInterface_ShutDownWithDrain_Call {
	return &MockInterface_ShutDownWithDrain_Call{Call: _e.mock.On("ShutDownWithDrain")}
}

func (_c *MockInterface_ShutDownWithDrain_Call) Run(run func()) *MockInterface_ShutDownWithDrain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_ShutDownWithDrain_Call) Return() *MockInterface_ShutDownWithDrain_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_ShutDownWithDrain_Call) RunAndReturn(run func()) *MockInterface_ShutDownWithDrain_Call {
	_c.Run(run)
	return _c
}

// ShuttingDown provides a mock function for the type MockInterface
func (_mock *MockInterface) ShuttingDown() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShuttingDown")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockInterface_ShuttingDown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShuttingDown'
type MockInterface_ShuttingDown_Call struct {
	*mock.Call
}

// ShuttingDown is a helper method to define mock.On call
func (_e *MockInterface_Expecter) ShuttingDown() *MockInterface_ShuttingDown_Call {
	return &MockInterface_ShuttingDown_Call{Call: _e.mock.On("ShuttingDown")}
}

func (_c *MockInterface_ShuttingDown_Call) Run(run func()) *MockInterface_ShuttingDown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_ShuttingDown_Call) Return(b bool) *MockInterface_ShuttingDown_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockInterface_ShuttingDown_Call) RunAndReturn(run func() bool) *MockInterface_ShuttingDown_Call {
	_c.Call.Return(run)
	return _c
}
