// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package discovery

import (
	"github.com/google/gnostic-models/openapiv2"
	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/version"
	"k8s.io/client-go/discovery"
	"k8s.io/client-go/openapi"
	"k8s.io/client-go/rest"
)

// NewMockDiscoveryInterface creates a new instance of MockDiscoveryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDiscoveryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDiscoveryInterface {
	mock := &MockDiscoveryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDiscoveryInterface is an autogenerated mock type for the DiscoveryInterface type
type MockDiscoveryInterface struct {
	mock.Mock
}

type MockDiscoveryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDiscoveryInterface) EXPECT() *MockDiscoveryInterface_Expecter {
	return &MockDiscoveryInterface_Expecter{mock: &_m.Mock}
}

// OpenAPISchema provides a mock function for the type MockDiscoveryInterface
func (_mock *MockDiscoveryInterface) OpenAPISchema() (*openapi_v2.Document, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for OpenAPISchema")
	}

	var r0 *openapi_v2.Document
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*openapi_v2.Document, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *openapi_v2.Document); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openapi_v2.Document)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDiscoveryInterface_OpenAPISchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenAPISchema'
type MockDiscoveryInterface_OpenAPISchema_Call struct {
	*mock.Call
}

// OpenAPISchema is a helper method to define mock.On call
func (_e *MockDiscoveryInterface_Expecter) OpenAPISchema() *MockDiscoveryInterface_OpenAPISchema_Call {
	return &MockDiscoveryInterface_OpenAPISchema_Call{Call: _e.mock.On("OpenAPISchema")}
}

func (_c *MockDiscoveryInterface_OpenAPISchema_Call) Run(run func()) *MockDiscoveryInterface_OpenAPISchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryInterface_OpenAPISchema_Call) Return(document *openapi_v2.Document, err error) *MockDiscoveryInterface_OpenAPISchema_Call {
	_c.Call.Return(document, err)
	return _c
}

func (_c *MockDiscoveryInterface_OpenAPISchema_Call) RunAndReturn(run func() (*openapi_v2.Document, error)) *MockDiscoveryInterface_OpenAPISchema_Call {
	_c.Call.Return(run)
	return _c
}

// OpenAPIV3 provides a mock function for the type MockDiscoveryInterface
func (_mock *MockDiscoveryInterface) OpenAPIV3() openapi.Client {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for OpenAPIV3")
	}

	var r0 openapi.Client
	if returnFunc, ok := ret.Get(0).(func() openapi.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(openapi.Client)
		}
	}
	return r0
}

// MockDiscoveryInterface_OpenAPIV3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenAPIV3'
type MockDiscoveryInterface_OpenAPIV3_Call struct {
	*mock.Call
}

// OpenAPIV3 is a helper method to define mock.On call
func (_e *MockDiscoveryInterface_Expecter) OpenAPIV3() *MockDiscoveryInterface_OpenAPIV3_Call {
	return &MockDiscoveryInterface_OpenAPIV3_Call{Call: _e.mock.On("OpenAPIV3")}
}

func (_c *MockDiscoveryInterface_OpenAPIV3_Call) Run(run func()) *MockDiscoveryInterface_OpenAPIV3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryInterface_OpenAPIV3_Call) Return(client openapi.Client) *MockDiscoveryInterface_OpenAPIV3_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *MockDiscoveryInterface_OpenAPIV3_Call) RunAndReturn(run func() openapi.Client) *MockDiscoveryInterface_OpenAPIV3_Call {
	_c.Call.Return(run)
	return _c
}

// RESTClient provides a mock function for the type MockDiscoveryInterface
func (_mock *MockDiscoveryInterface) RESTClient() rest.Interface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RESTClient")
	}

	var r0 rest.Interface
	if returnFunc, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}
	return r0
}

// MockDiscoveryInterface_RESTClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RESTClient'
type MockDiscoveryInterface_RESTClient_Call struct {
	*mock.Call
}

// RESTClient is a helper method to define mock.On call
func (_e *MockDiscoveryInterface_Expecter) RESTClient() *MockDiscoveryInterface_RESTClient_Call {
	return &MockDiscoveryInterface_RESTClient_Call{Call: _e.mock.On("RESTClient")}
}

func (_c *MockDiscoveryInterface_RESTClient_Call) Run(run func()) *MockDiscoveryInterface_RESTClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryInterface_RESTClient_Call) Return(interfaceParam rest.Interface) *MockDiscoveryInterface_RESTClient_Call {
	_c.Call.Return(interfaceParam)
	return _c
}

func (_c *MockDiscoveryInterface_RESTClient_Call) RunAndReturn(run func() rest.Interface) *MockDiscoveryInterface_RESTClient_Call {
	_c.Call.Return(run)
	return _c
}

// ServerGroups provides a mock function for the type MockDiscoveryInterface
func (_mock *MockDiscoveryInterface) ServerGroups() (*v1.APIGroupList, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerGroups")
	}

	var r0 *v1.APIGroupList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*v1.APIGroupList, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *v1.APIGroupList); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.APIGroupList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDiscoveryInterface_ServerGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerGroups'
type MockDiscoveryInterface_ServerGroups_Call struct {
	*mock.Call
}

// ServerGroups is a helper method to define mock.On call
func (_e *MockDiscoveryInterface_Expecter) ServerGroups() *MockDiscoveryInterface_ServerGroups_Call {
	return &MockDiscoveryInterface_ServerGroups_Call{Call: _e.mock.On("ServerGroups")}
}

func (_c *MockDiscoveryInterface_ServerGroups_Call) Run(run func()) *MockDiscoveryInterface_ServerGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryInterface_ServerGroups_Call) Return(aPIGroupList *v1.APIGroupList, err error) *MockDiscoveryInterface_ServerGroups_Call {
	_c.Call.Return(aPIGroupList, err)
	return _c
}

func (_c *MockDiscoveryInterface_ServerGroups_Call) RunAndReturn(run func() (*v1.APIGroupList, error)) *MockDiscoveryInterface_ServerGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ServerGroupsAndResources provides a mock function for the type MockDiscoveryInterface
func (_mock *MockDiscoveryInterface) ServerGroupsAndResources() ([]*v1.APIGroup, []*v1.APIResourceList, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerGroupsAndResources")
	}

	var r0 []*v1.APIGroup
	var r1 []*v1.APIResourceList
	var r2 error
	if returnFunc, ok := ret.Get(0).(func() ([]*v1.APIGroup, []*v1.APIResourceList, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*v1.APIGroup); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.APIGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() []*v1.APIResourceList); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*v1.APIResourceList)
		}
	}
	if returnFunc, ok := ret.Get(2).(func() error); ok {
		r2 = returnFunc()
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDiscoveryInterface_ServerGroupsAndResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerGroupsAndResources'
type MockDiscoveryInterface_ServerGroupsAndResources_Call struct {
	*mock.Call
}

// ServerGroupsAndResources is a helper method to define mock.On call
func (_e *MockDiscoveryInterface_Expecter) ServerGroupsAndResources() *MockDiscoveryInterface_ServerGroupsAndResources_Call {
	return &MockDiscoveryInterface_ServerGroupsAndResources_Call{Call: _e.mock.On("ServerGroupsAndResources")}
}

func (_c *MockDiscoveryInterface_ServerGroupsAndResources_Call) Run(run func()) *MockDiscoveryInterface_ServerGroupsAndResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryInterface_ServerGroupsAndResources_Call) Return(aPIGroups []*v1.APIGroup, aPIResourceLists []*v1.APIResourceList, err error) *MockDiscoveryInterface_ServerGroupsAndResources_Call {
	_c.Call.Return(aPIGroups, aPIResourceLists, err)
	return _c
}

func (_c *MockDiscoveryInterface_ServerGroupsAndResources_Call) RunAndReturn(run func() ([]*v1.APIGroup, []*v1.APIResourceList, error)) *MockDiscoveryInterface_ServerGroupsAndResources_Call {
	_c.Call.Return(run)
	return _c
}

// ServerPreferredNamespacedResources provides a mock function for the type MockDiscoveryInterface
func (_mock *MockDiscoveryInterface) ServerPreferredNamespacedResources() ([]*v1.APIResourceList, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerPreferredNamespacedResources")
	}

	var r0 []*v1.APIResourceList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*v1.APIResourceList, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*v1.APIResourceList); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.APIResourceList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDiscoveryInterface_ServerPreferredNamespacedResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerPreferredNamespacedResources'
type MockDiscoveryInterface_ServerPreferredNamespacedResources_Call struct {
	*mock.Call
}

// ServerPreferredNamespacedResources is a helper method to define mock.On call
func (_e *MockDiscoveryInterface_Expecter) ServerPreferredNamespacedResources() *MockDiscoveryInterface_ServerPreferredNamespacedResources_Call {
	return &MockDiscoveryInterface_ServerPreferredNamespacedResources_Call{Call: _e.mock.On("ServerPreferredNamespacedResources")}
}

func (_c *MockDiscoveryInterface_ServerPreferredNamespacedResources_Call) Run(run func()) *MockDiscoveryInterface_ServerPreferredNamespacedResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryInterface_ServerPreferredNamespacedResources_Call) Return(aPIResourceLists []*v1.APIResourceList, err error) *MockDiscoveryInterface_ServerPreferredNamespacedResources_Call {
	_c.Call.Return(aPIResourceLists, err)
	return _c
}

func (_c *MockDiscoveryInterface_ServerPreferredNamespacedResources_Call) RunAndReturn(run func() ([]*v1.APIResourceList, error)) *MockDiscoveryInterface_ServerPreferredNamespacedResources_Call {
	_c.Call.Return(run)
	return _c
}

// ServerPreferredResources provides a mock function for the type MockDiscoveryInterface
func (_mock *MockDiscoveryInterface) ServerPreferredResources() ([]*v1.APIResourceList, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerPreferredResources")
	}

	var r0 []*v1.APIResourceList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*v1.APIResourceList, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*v1.APIResourceList); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.APIResourceList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDiscoveryInterface_ServerPreferredResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerPreferredResources'
type MockDiscoveryInterface_ServerPreferredResources_Call struct {
	*mock.Call
}

// ServerPreferredResources is a helper method to define mock.On call
func (_e *MockDiscoveryInterface_Expecter) ServerPreferredResources() *MockDiscoveryInterface_ServerPreferredResources_Call {
	return &MockDiscoveryInterface_ServerPreferredResources_Call{Call: _e.mock.On("ServerPreferredResources")}
}

func (_c *MockDiscoveryInterface_ServerPreferredResources_Call) Run(run func()) *MockDiscoveryInterface_ServerPreferredResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryInterface_ServerPreferredResources_Call) Return(aPIResourceLists []*v1.APIResourceList, err error) *MockDiscoveryInterface_ServerPreferredResources_Call {
	_c.Call.Return(aPIResourceLists, err)
	return _c
}

func (_c *MockDiscoveryInterface_ServerPreferredResources_Call) RunAndReturn(run func() ([]*v1.APIResourceList, error)) *MockDiscoveryInterface_ServerPreferredResources_Call {
	_c.Call.Return(run)
	return _c
}

// ServerResourcesForGroupVersion provides a mock function for the type MockDiscoveryInterface
func (_mock *MockDiscoveryInterface) ServerResourcesForGroupVersion(groupVersion string) (*v1.APIResourceList, error) {
	ret := _mock.Called(groupVersion)

	if len(ret) == 0 {
		panic("no return value specified for ServerResourcesForGroupVersion")
	}

	var r0 *v1.APIResourceList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*v1.APIResourceList, error)); ok {
		return returnFunc(groupVersion)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *v1.APIResourceList); ok {
		r0 = returnFunc(groupVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.APIResourceList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(groupVersion)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDiscoveryInterface_ServerResourcesForGroupVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerResourcesForGroupVersion'
type MockDiscoveryInterface_ServerResourcesForGroupVersion_Call struct {
	*mock.Call
}

// ServerResourcesForGroupVersion is a helper method to define mock.On call
//   - groupVersion string
func (_e *MockDiscoveryInterface_Expecter) ServerResourcesForGroupVersion(groupVersion interface{}) *MockDiscoveryInterface_ServerResourcesForGroupVersion_Call {
	return &MockDiscoveryInterface_ServerResourcesForGroupVersion_Call{Call: _e.mock.On("ServerResourcesForGroupVersion", groupVersion)}
}

func (_c *MockDiscoveryInterface_ServerResourcesForGroupVersion_Call) Run(run func(groupVersion string)) *MockDiscoveryInterface_ServerResourcesForGroupVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDiscoveryInterface_ServerResourcesForGroupVersion_Call) Return(aPIResourceList *v1.APIResourceList, err error) *MockDiscoveryInterface_ServerResourcesForGroupVersion_Call {
	_c.Call.Return(aPIResourceList, err)
	return _c
}

func (_c *MockDiscoveryInterface_ServerResourcesForGroupVersion_Call) RunAndReturn(run func(groupVersion string) (*v1.APIResourceList, error)) *MockDiscoveryInterface_ServerResourcesForGroupVersion_Call {
	_c.Call.Return(run)
	return _c
}

// ServerVersion provides a mock function for the type MockDiscoveryInterface
func (_mock *MockDiscoveryInterface) ServerVersion() (*version.Info, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerVersion")
	}

	var r0 *version.Info
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*version.Info, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *version.Info); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*version.Info)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDiscoveryInterface_ServerVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerVersion'
type MockDiscoveryInterface_ServerVersion_Call struct {
	*mock.Call
}

// ServerVersion is a helper method to define mock.On call
func (_e *MockDiscoveryInterface_Expecter) ServerVersion() *MockDiscoveryInterface_ServerVersion_Call {
	return &MockDiscoveryInterface_ServerVersion_Call{Call: _e.mock.On("ServerVersion")}
}

func (_c *MockDiscoveryInterface_ServerVersion_Call) Run(run func()) *MockDiscoveryInterface_ServerVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryInterface_ServerVersion_Call) Return(info *version.Info, err error) *MockDiscoveryInterface_ServerVersion_Call {
	_c.Call.Return(info, err)
	return _c
}

func (_c *MockDiscoveryInterface_ServerVersion_Call) RunAndReturn(run func() (*version.Info, error)) *MockDiscoveryInterface_ServerVersion_Call {
	_c.Call.Return(run)
	return _c
}

// WithLegacy provides a mock function for the type MockDiscoveryInterface
func (_mock *MockDiscoveryInterface) WithLegacy() discovery.DiscoveryInterface {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithLegacy")
	}

	var r0 discovery.DiscoveryInterface
	if returnFunc, ok := ret.Get(0).(func() discovery.DiscoveryInterface); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.DiscoveryInterface)
		}
	}
	return r0
}

// MockDiscoveryInterface_WithLegacy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithLegacy'
type MockDiscoveryInterface_WithLegacy_Call struct {
	*mock.Call
}

// WithLegacy is a helper method to define mock.On call
func (_e *MockDiscoveryInterface_Expecter) WithLegacy() *MockDiscoveryInterface_WithLegacy_Call {
	return &MockDiscoveryInterface_WithLegacy_Call{Call: _e.mock.On("WithLegacy")}
}

func (_c *MockDiscoveryInterface_WithLegacy_Call) Run(run func()) *MockDiscoveryInterface_WithLegacy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscoveryInterface_WithLegacy_Call) Return(discoveryInterface discovery.DiscoveryInterface) *MockDiscoveryInterface_WithLegacy_Call {
	_c.Call.Return(discoveryInterface)
	return _c
}

func (_c *MockDiscoveryInterface_WithLegacy_Call) RunAndReturn(run func() discovery.DiscoveryInterface) *MockDiscoveryInterface_WithLegacy_Call {
	_c.Call.Return(run)
	return _c
}
