// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metadata

import (
	"castai-agent/internal/services/metadata"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// StoreMetadataConfigMap provides a mock function for the type MockStore
func (_mock *MockStore) StoreMetadataConfigMap(ctx context.Context, metadata1 *metadata.Metadata) error {
	ret := _mock.Called(ctx, metadata1)

	if len(ret) == 0 {
		panic("no return value specified for StoreMetadataConfigMap")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *metadata.Metadata) error); ok {
		r0 = returnFunc(ctx, metadata1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_StoreMetadataConfigMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreMetadataConfigMap'
type MockStore_StoreMetadataConfigMap_Call struct {
	*mock.Call
}

// StoreMetadataConfigMap is a helper method to define mock.On call
//   - ctx context.Context
//   - metadata1 *metadata.Metadata
func (_e *MockStore_Expecter) StoreMetadataConfigMap(ctx interface{}, metadata1 interface{}) *MockStore_StoreMetadataConfigMap_Call {
	return &MockStore_StoreMetadataConfigMap_Call{Call: _e.mock.On("StoreMetadataConfigMap", ctx, metadata1)}
}

func (_c *MockStore_StoreMetadataConfigMap_Call) Run(run func(ctx context.Context, metadata1 *metadata.Metadata)) *MockStore_StoreMetadataConfigMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *metadata.Metadata
		if args[1] != nil {
			arg1 = args[1].(*metadata.Metadata)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_StoreMetadataConfigMap_Call) Return(err error) *MockStore_StoreMetadataConfigMap_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_StoreMetadataConfigMap_Call) RunAndReturn(run func(ctx context.Context, metadata1 *metadata.Metadata) error) *MockStore_StoreMetadataConfigMap_Call {
	_c.Call.Return(run)
	return _c
}
