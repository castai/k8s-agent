// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package discovery

import (
	"castai-agent/pkg/cloud"
	"context"

	"github.com/google/uuid"
	"github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetCSP provides a mock function for the type MockService
func (_mock *MockService) GetCSP(ctx context.Context) (cloud.Cloud, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCSP")
	}

	var r0 cloud.Cloud
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (cloud.Cloud, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) cloud.Cloud); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(cloud.Cloud)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetCSP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCSP'
type MockService_GetCSP_Call struct {
	*mock.Call
}

// GetCSP is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetCSP(ctx interface{}) *MockService_GetCSP_Call {
	return &MockService_GetCSP_Call{Call: _e.mock.On("GetCSP", ctx)}
}

func (_c *MockService_GetCSP_Call) Run(run func(ctx context.Context)) *MockService_GetCSP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_GetCSP_Call) Return(csp cloud.Cloud, reterr error) *MockService_GetCSP_Call {
	_c.Call.Return(csp, reterr)
	return _c
}

func (_c *MockService_GetCSP_Call) RunAndReturn(run func(ctx context.Context) (cloud.Cloud, error)) *MockService_GetCSP_Call {
	_c.Call.Return(run)
	return _c
}

// GetCSPAndRegion provides a mock function for the type MockService
func (_mock *MockService) GetCSPAndRegion(ctx context.Context) (cloud.Cloud, string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCSPAndRegion")
	}

	var r0 cloud.Cloud
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (cloud.Cloud, string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) cloud.Cloud); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(cloud.Cloud)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = returnFunc(ctx)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockService_GetCSPAndRegion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCSPAndRegion'
type MockService_GetCSPAndRegion_Call struct {
	*mock.Call
}

// GetCSPAndRegion is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetCSPAndRegion(ctx interface{}) *MockService_GetCSPAndRegion_Call {
	return &MockService_GetCSPAndRegion_Call{Call: _e.mock.On("GetCSPAndRegion", ctx)}
}

func (_c *MockService_GetCSPAndRegion_Call) Run(run func(ctx context.Context)) *MockService_GetCSPAndRegion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_GetCSPAndRegion_Call) Return(csp cloud.Cloud, region string, reterr error) *MockService_GetCSPAndRegion_Call {
	_c.Call.Return(csp, region, reterr)
	return _c
}

func (_c *MockService_GetCSPAndRegion_Call) RunAndReturn(run func(ctx context.Context) (cloud.Cloud, string, error)) *MockService_GetCSPAndRegion_Call {
	_c.Call.Return(run)
	return _c
}

// GetKOPSClusterNameAndStateStore provides a mock function for the type MockService
func (_mock *MockService) GetKOPSClusterNameAndStateStore(ctx context.Context, log logrus.FieldLogger) (string, string, error) {
	ret := _mock.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for GetKOPSClusterNameAndStateStore")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, logrus.FieldLogger) (string, string, error)); ok {
		return returnFunc(ctx, log)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, logrus.FieldLogger) string); ok {
		r0 = returnFunc(ctx, log)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, logrus.FieldLogger) string); ok {
		r1 = returnFunc(ctx, log)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, logrus.FieldLogger) error); ok {
		r2 = returnFunc(ctx, log)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockService_GetKOPSClusterNameAndStateStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKOPSClusterNameAndStateStore'
type MockService_GetKOPSClusterNameAndStateStore_Call struct {
	*mock.Call
}

// GetKOPSClusterNameAndStateStore is a helper method to define mock.On call
//   - ctx context.Context
//   - log logrus.FieldLogger
func (_e *MockService_Expecter) GetKOPSClusterNameAndStateStore(ctx interface{}, log interface{}) *MockService_GetKOPSClusterNameAndStateStore_Call {
	return &MockService_GetKOPSClusterNameAndStateStore_Call{Call: _e.mock.On("GetKOPSClusterNameAndStateStore", ctx, log)}
}

func (_c *MockService_GetKOPSClusterNameAndStateStore_Call) Run(run func(ctx context.Context, log logrus.FieldLogger)) *MockService_GetKOPSClusterNameAndStateStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 logrus.FieldLogger
		if args[1] != nil {
			arg1 = args[1].(logrus.FieldLogger)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_GetKOPSClusterNameAndStateStore_Call) Return(clusterName string, stateStore string, reterr error) *MockService_GetKOPSClusterNameAndStateStore_Call {
	_c.Call.Return(clusterName, stateStore, reterr)
	return _c
}

func (_c *MockService_GetKOPSClusterNameAndStateStore_Call) RunAndReturn(run func(ctx context.Context, log logrus.FieldLogger) (string, string, error)) *MockService_GetKOPSClusterNameAndStateStore_Call {
	_c.Call.Return(run)
	return _c
}

// GetKubeSystemNamespaceID provides a mock function for the type MockService
func (_mock *MockService) GetKubeSystemNamespaceID(ctx context.Context) (*uuid.UUID, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetKubeSystemNamespaceID")
	}

	var r0 *uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*uuid.UUID, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *uuid.UUID); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetKubeSystemNamespaceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKubeSystemNamespaceID'
type MockService_GetKubeSystemNamespaceID_Call struct {
	*mock.Call
}

// GetKubeSystemNamespaceID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetKubeSystemNamespaceID(ctx interface{}) *MockService_GetKubeSystemNamespaceID_Call {
	return &MockService_GetKubeSystemNamespaceID_Call{Call: _e.mock.On("GetKubeSystemNamespaceID", ctx)}
}

func (_c *MockService_GetKubeSystemNamespaceID_Call) Run(run func(ctx context.Context)) *MockService_GetKubeSystemNamespaceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_GetKubeSystemNamespaceID_Call) Return(uUID *uuid.UUID, err error) *MockService_GetKubeSystemNamespaceID_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockService_GetKubeSystemNamespaceID_Call) RunAndReturn(run func(ctx context.Context) (*uuid.UUID, error)) *MockService_GetKubeSystemNamespaceID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenshiftClusterID provides a mock function for the type MockService
func (_mock *MockService) GetOpenshiftClusterID(ctx context.Context) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenshiftClusterID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetOpenshiftClusterID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenshiftClusterID'
type MockService_GetOpenshiftClusterID_Call struct {
	*mock.Call
}

// GetOpenshiftClusterID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetOpenshiftClusterID(ctx interface{}) *MockService_GetOpenshiftClusterID_Call {
	return &MockService_GetOpenshiftClusterID_Call{Call: _e.mock.On("GetOpenshiftClusterID", ctx)}
}

func (_c *MockService_GetOpenshiftClusterID_Call) Run(run func(ctx context.Context)) *MockService_GetOpenshiftClusterID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_GetOpenshiftClusterID_Call) Return(s string, err error) *MockService_GetOpenshiftClusterID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockService_GetOpenshiftClusterID_Call) RunAndReturn(run func(ctx context.Context) (string, error)) *MockService_GetOpenshiftClusterID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenshiftClusterName provides a mock function for the type MockService
func (_mock *MockService) GetOpenshiftClusterName(ctx context.Context) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenshiftClusterName")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetOpenshiftClusterName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenshiftClusterName'
type MockService_GetOpenshiftClusterName_Call struct {
	*mock.Call
}

// GetOpenshiftClusterName is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetOpenshiftClusterName(ctx interface{}) *MockService_GetOpenshiftClusterName_Call {
	return &MockService_GetOpenshiftClusterName_Call{Call: _e.mock.On("GetOpenshiftClusterName", ctx)}
}

func (_c *MockService_GetOpenshiftClusterName_Call) Run(run func(ctx context.Context)) *MockService_GetOpenshiftClusterName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_GetOpenshiftClusterName_Call) Return(s string, err error) *MockService_GetOpenshiftClusterName_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockService_GetOpenshiftClusterName_Call) RunAndReturn(run func(ctx context.Context) (string, error)) *MockService_GetOpenshiftClusterName_Call {
	_c.Call.Return(run)
	return _c
}
