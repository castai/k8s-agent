// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package informers

import (
	mock "github.com/stretchr/testify/mock"
	"k8s.io/client-go/tools/cache"
)

// NewMockPodMetricsInformer creates a new instance of MockPodMetricsInformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPodMetricsInformer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPodMetricsInformer {
	mock := &MockPodMetricsInformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPodMetricsInformer is an autogenerated mock type for the PodMetricsInformer type
type MockPodMetricsInformer struct {
	mock.Mock
}

type MockPodMetricsInformer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPodMetricsInformer) EXPECT() *MockPodMetricsInformer_Expecter {
	return &MockPodMetricsInformer_Expecter{mock: &_m.Mock}
}

// Informer provides a mock function for the type MockPodMetricsInformer
func (_mock *MockPodMetricsInformer) Informer() cache.SharedIndexInformer {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Informer")
	}

	var r0 cache.SharedIndexInformer
	if returnFunc, ok := ret.Get(0).(func() cache.SharedIndexInformer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.SharedIndexInformer)
		}
	}
	return r0
}

// MockPodMetricsInformer_Informer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Informer'
type MockPodMetricsInformer_Informer_Call struct {
	*mock.Call
}

// Informer is a helper method to define mock.On call
func (_e *MockPodMetricsInformer_Expecter) Informer() *MockPodMetricsInformer_Informer_Call {
	return &MockPodMetricsInformer_Informer_Call{Call: _e.mock.On("Informer")}
}

func (_c *MockPodMetricsInformer_Informer_Call) Run(run func()) *MockPodMetricsInformer_Informer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPodMetricsInformer_Informer_Call) Return(sharedIndexInformer cache.SharedIndexInformer) *MockPodMetricsInformer_Informer_Call {
	_c.Call.Return(sharedIndexInformer)
	return _c
}

func (_c *MockPodMetricsInformer_Informer_Call) RunAndReturn(run func() cache.SharedIndexInformer) *MockPodMetricsInformer_Informer_Call {
	_c.Call.Return(run)
	return _c
}
