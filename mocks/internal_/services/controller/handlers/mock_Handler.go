// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handlers

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// OnAdd provides a mock function for the type MockHandler
func (_mock *MockHandler) OnAdd(obj interface{}, isInInitialList bool) {
	_mock.Called(obj, isInInitialList)
	return
}

// MockHandler_OnAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnAdd'
type MockHandler_OnAdd_Call struct {
	*mock.Call
}

// OnAdd is a helper method to define mock.On call
//   - obj interface{}
//   - isInInitialList bool
func (_e *MockHandler_Expecter) OnAdd(obj interface{}, isInInitialList interface{}) *MockHandler_OnAdd_Call {
	return &MockHandler_OnAdd_Call{Call: _e.mock.On("OnAdd", obj, isInInitialList)}
}

func (_c *MockHandler_OnAdd_Call) Run(run func(obj interface{}, isInInitialList bool)) *MockHandler_OnAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_OnAdd_Call) Return() *MockHandler_OnAdd_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnAdd_Call) RunAndReturn(run func(obj interface{}, isInInitialList bool)) *MockHandler_OnAdd_Call {
	_c.Run(run)
	return _c
}

// OnDelete provides a mock function for the type MockHandler
func (_mock *MockHandler) OnDelete(obj interface{}) {
	_mock.Called(obj)
	return
}

// MockHandler_OnDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDelete'
type MockHandler_OnDelete_Call struct {
	*mock.Call
}

// OnDelete is a helper method to define mock.On call
//   - obj interface{}
func (_e *MockHandler_Expecter) OnDelete(obj interface{}) *MockHandler_OnDelete_Call {
	return &MockHandler_OnDelete_Call{Call: _e.mock.On("OnDelete", obj)}
}

func (_c *MockHandler_OnDelete_Call) Run(run func(obj interface{})) *MockHandler_OnDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHandler_OnDelete_Call) Return() *MockHandler_OnDelete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnDelete_Call) RunAndReturn(run func(obj interface{})) *MockHandler_OnDelete_Call {
	_c.Run(run)
	return _c
}

// OnUpdate provides a mock function for the type MockHandler
func (_mock *MockHandler) OnUpdate(oldObj interface{}, newObj interface{}) {
	_mock.Called(oldObj, newObj)
	return
}

// MockHandler_OnUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnUpdate'
type MockHandler_OnUpdate_Call struct {
	*mock.Call
}

// OnUpdate is a helper method to define mock.On call
//   - oldObj interface{}
//   - newObj interface{}
func (_e *MockHandler_Expecter) OnUpdate(oldObj interface{}, newObj interface{}) *MockHandler_OnUpdate_Call {
	return &MockHandler_OnUpdate_Call{Call: _e.mock.On("OnUpdate", oldObj, newObj)}
}

func (_c *MockHandler_OnUpdate_Call) Run(run func(oldObj interface{}, newObj interface{})) *MockHandler_OnUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHandler_OnUpdate_Call) Return() *MockHandler_OnUpdate_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_OnUpdate_Call) RunAndReturn(run func(oldObj interface{}, newObj interface{})) *MockHandler_OnUpdate_Call {
	_c.Run(run)
	return _c
}
