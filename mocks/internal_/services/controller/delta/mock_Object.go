// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package delta

import (
	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
)

// NewMockObject creates a new instance of MockObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObject {
	mock := &MockObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockObject is an autogenerated mock type for the Object type
type MockObject struct {
	mock.Mock
}

type MockObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObject) EXPECT() *MockObject_Expecter {
	return &MockObject_Expecter{mock: &_m.Mock}
}

// DeepCopyObject provides a mock function for the type MockObject
func (_mock *MockObject) DeepCopyObject() runtime.Object {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeepCopyObject")
	}

	var r0 runtime.Object
	if returnFunc, ok := ret.Get(0).(func() runtime.Object); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Object)
		}
	}
	return r0
}

// MockObject_DeepCopyObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeepCopyObject'
type MockObject_DeepCopyObject_Call struct {
	*mock.Call
}

// DeepCopyObject is a helper method to define mock.On call
func (_e *MockObject_Expecter) DeepCopyObject() *MockObject_DeepCopyObject_Call {
	return &MockObject_DeepCopyObject_Call{Call: _e.mock.On("DeepCopyObject")}
}

func (_c *MockObject_DeepCopyObject_Call) Run(run func()) *MockObject_DeepCopyObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_DeepCopyObject_Call) Return(object runtime.Object) *MockObject_DeepCopyObject_Call {
	_c.Call.Return(object)
	return _c
}

func (_c *MockObject_DeepCopyObject_Call) RunAndReturn(run func() runtime.Object) *MockObject_DeepCopyObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnnotations provides a mock function for the type MockObject
func (_mock *MockObject) GetAnnotations() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAnnotations")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockObject_GetAnnotations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnnotations'
type MockObject_GetAnnotations_Call struct {
	*mock.Call
}

// GetAnnotations is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetAnnotations() *MockObject_GetAnnotations_Call {
	return &MockObject_GetAnnotations_Call{Call: _e.mock.On("GetAnnotations")}
}

func (_c *MockObject_GetAnnotations_Call) Run(run func()) *MockObject_GetAnnotations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetAnnotations_Call) Return(stringToString map[string]string) *MockObject_GetAnnotations_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockObject_GetAnnotations_Call) RunAndReturn(run func() map[string]string) *MockObject_GetAnnotations_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreationTimestamp provides a mock function for the type MockObject
func (_mock *MockObject) GetCreationTimestamp() v1.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCreationTimestamp")
	}

	var r0 v1.Time
	if returnFunc, ok := ret.Get(0).(func() v1.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(v1.Time)
	}
	return r0
}

// MockObject_GetCreationTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreationTimestamp'
type MockObject_GetCreationTimestamp_Call struct {
	*mock.Call
}

// GetCreationTimestamp is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetCreationTimestamp() *MockObject_GetCreationTimestamp_Call {
	return &MockObject_GetCreationTimestamp_Call{Call: _e.mock.On("GetCreationTimestamp")}
}

func (_c *MockObject_GetCreationTimestamp_Call) Run(run func()) *MockObject_GetCreationTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetCreationTimestamp_Call) Return(time v1.Time) *MockObject_GetCreationTimestamp_Call {
	_c.Call.Return(time)
	return _c
}

func (_c *MockObject_GetCreationTimestamp_Call) RunAndReturn(run func() v1.Time) *MockObject_GetCreationTimestamp_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeletionGracePeriodSeconds provides a mock function for the type MockObject
func (_mock *MockObject) GetDeletionGracePeriodSeconds() *int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeletionGracePeriodSeconds")
	}

	var r0 *int64
	if returnFunc, ok := ret.Get(0).(func() *int64); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}
	return r0
}

// MockObject_GetDeletionGracePeriodSeconds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeletionGracePeriodSeconds'
type MockObject_GetDeletionGracePeriodSeconds_Call struct {
	*mock.Call
}

// GetDeletionGracePeriodSeconds is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetDeletionGracePeriodSeconds() *MockObject_GetDeletionGracePeriodSeconds_Call {
	return &MockObject_GetDeletionGracePeriodSeconds_Call{Call: _e.mock.On("GetDeletionGracePeriodSeconds")}
}

func (_c *MockObject_GetDeletionGracePeriodSeconds_Call) Run(run func()) *MockObject_GetDeletionGracePeriodSeconds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetDeletionGracePeriodSeconds_Call) Return(n *int64) *MockObject_GetDeletionGracePeriodSeconds_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockObject_GetDeletionGracePeriodSeconds_Call) RunAndReturn(run func() *int64) *MockObject_GetDeletionGracePeriodSeconds_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeletionTimestamp provides a mock function for the type MockObject
func (_mock *MockObject) GetDeletionTimestamp() *v1.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeletionTimestamp")
	}

	var r0 *v1.Time
	if returnFunc, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}
	return r0
}

// MockObject_GetDeletionTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeletionTimestamp'
type MockObject_GetDeletionTimestamp_Call struct {
	*mock.Call
}

// GetDeletionTimestamp is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetDeletionTimestamp() *MockObject_GetDeletionTimestamp_Call {
	return &MockObject_GetDeletionTimestamp_Call{Call: _e.mock.On("GetDeletionTimestamp")}
}

func (_c *MockObject_GetDeletionTimestamp_Call) Run(run func()) *MockObject_GetDeletionTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetDeletionTimestamp_Call) Return(time *v1.Time) *MockObject_GetDeletionTimestamp_Call {
	_c.Call.Return(time)
	return _c
}

func (_c *MockObject_GetDeletionTimestamp_Call) RunAndReturn(run func() *v1.Time) *MockObject_GetDeletionTimestamp_Call {
	_c.Call.Return(run)
	return _c
}

// GetFinalizers provides a mock function for the type MockObject
func (_mock *MockObject) GetFinalizers() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFinalizers")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockObject_GetFinalizers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFinalizers'
type MockObject_GetFinalizers_Call struct {
	*mock.Call
}

// GetFinalizers is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetFinalizers() *MockObject_GetFinalizers_Call {
	return &MockObject_GetFinalizers_Call{Call: _e.mock.On("GetFinalizers")}
}

func (_c *MockObject_GetFinalizers_Call) Run(run func()) *MockObject_GetFinalizers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetFinalizers_Call) Return(strings []string) *MockObject_GetFinalizers_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockObject_GetFinalizers_Call) RunAndReturn(run func() []string) *MockObject_GetFinalizers_Call {
	_c.Call.Return(run)
	return _c
}

// GetGenerateName provides a mock function for the type MockObject
func (_mock *MockObject) GetGenerateName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGenerateName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockObject_GetGenerateName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGenerateName'
type MockObject_GetGenerateName_Call struct {
	*mock.Call
}

// GetGenerateName is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetGenerateName() *MockObject_GetGenerateName_Call {
	return &MockObject_GetGenerateName_Call{Call: _e.mock.On("GetGenerateName")}
}

func (_c *MockObject_GetGenerateName_Call) Run(run func()) *MockObject_GetGenerateName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetGenerateName_Call) Return(s string) *MockObject_GetGenerateName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockObject_GetGenerateName_Call) RunAndReturn(run func() string) *MockObject_GetGenerateName_Call {
	_c.Call.Return(run)
	return _c
}

// GetGeneration provides a mock function for the type MockObject
func (_mock *MockObject) GetGeneration() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGeneration")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockObject_GetGeneration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGeneration'
type MockObject_GetGeneration_Call struct {
	*mock.Call
}

// GetGeneration is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetGeneration() *MockObject_GetGeneration_Call {
	return &MockObject_GetGeneration_Call{Call: _e.mock.On("GetGeneration")}
}

func (_c *MockObject_GetGeneration_Call) Run(run func()) *MockObject_GetGeneration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetGeneration_Call) Return(n int64) *MockObject_GetGeneration_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockObject_GetGeneration_Call) RunAndReturn(run func() int64) *MockObject_GetGeneration_Call {
	_c.Call.Return(run)
	return _c
}

// GetLabels provides a mock function for the type MockObject
func (_mock *MockObject) GetLabels() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLabels")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockObject_GetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabels'
type MockObject_GetLabels_Call struct {
	*mock.Call
}

// GetLabels is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetLabels() *MockObject_GetLabels_Call {
	return &MockObject_GetLabels_Call{Call: _e.mock.On("GetLabels")}
}

func (_c *MockObject_GetLabels_Call) Run(run func()) *MockObject_GetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetLabels_Call) Return(stringToString map[string]string) *MockObject_GetLabels_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockObject_GetLabels_Call) RunAndReturn(run func() map[string]string) *MockObject_GetLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagedFields provides a mock function for the type MockObject
func (_mock *MockObject) GetManagedFields() []v1.ManagedFieldsEntry {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetManagedFields")
	}

	var r0 []v1.ManagedFieldsEntry
	if returnFunc, ok := ret.Get(0).(func() []v1.ManagedFieldsEntry); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.ManagedFieldsEntry)
		}
	}
	return r0
}

// MockObject_GetManagedFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagedFields'
type MockObject_GetManagedFields_Call struct {
	*mock.Call
}

// GetManagedFields is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetManagedFields() *MockObject_GetManagedFields_Call {
	return &MockObject_GetManagedFields_Call{Call: _e.mock.On("GetManagedFields")}
}

func (_c *MockObject_GetManagedFields_Call) Run(run func()) *MockObject_GetManagedFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetManagedFields_Call) Return(managedFieldsEntrys []v1.ManagedFieldsEntry) *MockObject_GetManagedFields_Call {
	_c.Call.Return(managedFieldsEntrys)
	return _c
}

func (_c *MockObject_GetManagedFields_Call) RunAndReturn(run func() []v1.ManagedFieldsEntry) *MockObject_GetManagedFields_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function for the type MockObject
func (_mock *MockObject) GetName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockObject_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockObject_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetName() *MockObject_GetName_Call {
	return &MockObject_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockObject_GetName_Call) Run(run func()) *MockObject_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetName_Call) Return(s string) *MockObject_GetName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockObject_GetName_Call) RunAndReturn(run func() string) *MockObject_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function for the type MockObject
func (_mock *MockObject) GetNamespace() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockObject_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type MockObject_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetNamespace() *MockObject_GetNamespace_Call {
	return &MockObject_GetNamespace_Call{Call: _e.mock.On("GetNamespace")}
}

func (_c *MockObject_GetNamespace_Call) Run(run func()) *MockObject_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetNamespace_Call) Return(s string) *MockObject_GetNamespace_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockObject_GetNamespace_Call) RunAndReturn(run func() string) *MockObject_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectKind provides a mock function for the type MockObject
func (_mock *MockObject) GetObjectKind() schema.ObjectKind {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetObjectKind")
	}

	var r0 schema.ObjectKind
	if returnFunc, ok := ret.Get(0).(func() schema.ObjectKind); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.ObjectKind)
		}
	}
	return r0
}

// MockObject_GetObjectKind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectKind'
type MockObject_GetObjectKind_Call struct {
	*mock.Call
}

// GetObjectKind is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetObjectKind() *MockObject_GetObjectKind_Call {
	return &MockObject_GetObjectKind_Call{Call: _e.mock.On("GetObjectKind")}
}

func (_c *MockObject_GetObjectKind_Call) Run(run func()) *MockObject_GetObjectKind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetObjectKind_Call) Return(objectKind schema.ObjectKind) *MockObject_GetObjectKind_Call {
	_c.Call.Return(objectKind)
	return _c
}

func (_c *MockObject_GetObjectKind_Call) RunAndReturn(run func() schema.ObjectKind) *MockObject_GetObjectKind_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwnerReferences provides a mock function for the type MockObject
func (_mock *MockObject) GetOwnerReferences() []v1.OwnerReference {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOwnerReferences")
	}

	var r0 []v1.OwnerReference
	if returnFunc, ok := ret.Get(0).(func() []v1.OwnerReference); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.OwnerReference)
		}
	}
	return r0
}

// MockObject_GetOwnerReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnerReferences'
type MockObject_GetOwnerReferences_Call struct {
	*mock.Call
}

// GetOwnerReferences is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetOwnerReferences() *MockObject_GetOwnerReferences_Call {
	return &MockObject_GetOwnerReferences_Call{Call: _e.mock.On("GetOwnerReferences")}
}

func (_c *MockObject_GetOwnerReferences_Call) Run(run func()) *MockObject_GetOwnerReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetOwnerReferences_Call) Return(ownerReferences []v1.OwnerReference) *MockObject_GetOwnerReferences_Call {
	_c.Call.Return(ownerReferences)
	return _c
}

func (_c *MockObject_GetOwnerReferences_Call) RunAndReturn(run func() []v1.OwnerReference) *MockObject_GetOwnerReferences_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceVersion provides a mock function for the type MockObject
func (_mock *MockObject) GetResourceVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResourceVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockObject_GetResourceVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceVersion'
type MockObject_GetResourceVersion_Call struct {
	*mock.Call
}

// GetResourceVersion is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetResourceVersion() *MockObject_GetResourceVersion_Call {
	return &MockObject_GetResourceVersion_Call{Call: _e.mock.On("GetResourceVersion")}
}

func (_c *MockObject_GetResourceVersion_Call) Run(run func()) *MockObject_GetResourceVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetResourceVersion_Call) Return(s string) *MockObject_GetResourceVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockObject_GetResourceVersion_Call) RunAndReturn(run func() string) *MockObject_GetResourceVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelfLink provides a mock function for the type MockObject
func (_mock *MockObject) GetSelfLink() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSelfLink")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockObject_GetSelfLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelfLink'
type MockObject_GetSelfLink_Call struct {
	*mock.Call
}

// GetSelfLink is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetSelfLink() *MockObject_GetSelfLink_Call {
	return &MockObject_GetSelfLink_Call{Call: _e.mock.On("GetSelfLink")}
}

func (_c *MockObject_GetSelfLink_Call) Run(run func()) *MockObject_GetSelfLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetSelfLink_Call) Return(s string) *MockObject_GetSelfLink_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockObject_GetSelfLink_Call) RunAndReturn(run func() string) *MockObject_GetSelfLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetUID provides a mock function for the type MockObject
func (_mock *MockObject) GetUID() types.UID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUID")
	}

	var r0 types.UID
	if returnFunc, ok := ret.Get(0).(func() types.UID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(types.UID)
	}
	return r0
}

// MockObject_GetUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUID'
type MockObject_GetUID_Call struct {
	*mock.Call
}

// GetUID is a helper method to define mock.On call
func (_e *MockObject_Expecter) GetUID() *MockObject_GetUID_Call {
	return &MockObject_GetUID_Call{Call: _e.mock.On("GetUID")}
}

func (_c *MockObject_GetUID_Call) Run(run func()) *MockObject_GetUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObject_GetUID_Call) Return(uID types.UID) *MockObject_GetUID_Call {
	_c.Call.Return(uID)
	return _c
}

func (_c *MockObject_GetUID_Call) RunAndReturn(run func() types.UID) *MockObject_GetUID_Call {
	_c.Call.Return(run)
	return _c
}

// SetAnnotations provides a mock function for the type MockObject
func (_mock *MockObject) SetAnnotations(annotations map[string]string) {
	_mock.Called(annotations)
	return
}

// MockObject_SetAnnotations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAnnotations'
type MockObject_SetAnnotations_Call struct {
	*mock.Call
}

// SetAnnotations is a helper method to define mock.On call
//   - annotations map[string]string
func (_e *MockObject_Expecter) SetAnnotations(annotations interface{}) *MockObject_SetAnnotations_Call {
	return &MockObject_SetAnnotations_Call{Call: _e.mock.On("SetAnnotations", annotations)}
}

func (_c *MockObject_SetAnnotations_Call) Run(run func(annotations map[string]string)) *MockObject_SetAnnotations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]string
		if args[0] != nil {
			arg0 = args[0].(map[string]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetAnnotations_Call) Return() *MockObject_SetAnnotations_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetAnnotations_Call) RunAndReturn(run func(annotations map[string]string)) *MockObject_SetAnnotations_Call {
	_c.Run(run)
	return _c
}

// SetCreationTimestamp provides a mock function for the type MockObject
func (_mock *MockObject) SetCreationTimestamp(timestamp v1.Time) {
	_mock.Called(timestamp)
	return
}

// MockObject_SetCreationTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCreationTimestamp'
type MockObject_SetCreationTimestamp_Call struct {
	*mock.Call
}

// SetCreationTimestamp is a helper method to define mock.On call
//   - timestamp v1.Time
func (_e *MockObject_Expecter) SetCreationTimestamp(timestamp interface{}) *MockObject_SetCreationTimestamp_Call {
	return &MockObject_SetCreationTimestamp_Call{Call: _e.mock.On("SetCreationTimestamp", timestamp)}
}

func (_c *MockObject_SetCreationTimestamp_Call) Run(run func(timestamp v1.Time)) *MockObject_SetCreationTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 v1.Time
		if args[0] != nil {
			arg0 = args[0].(v1.Time)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetCreationTimestamp_Call) Return() *MockObject_SetCreationTimestamp_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetCreationTimestamp_Call) RunAndReturn(run func(timestamp v1.Time)) *MockObject_SetCreationTimestamp_Call {
	_c.Run(run)
	return _c
}

// SetDeletionGracePeriodSeconds provides a mock function for the type MockObject
func (_mock *MockObject) SetDeletionGracePeriodSeconds(n *int64) {
	_mock.Called(n)
	return
}

// MockObject_SetDeletionGracePeriodSeconds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeletionGracePeriodSeconds'
type MockObject_SetDeletionGracePeriodSeconds_Call struct {
	*mock.Call
}

// SetDeletionGracePeriodSeconds is a helper method to define mock.On call
//   - n *int64
func (_e *MockObject_Expecter) SetDeletionGracePeriodSeconds(n interface{}) *MockObject_SetDeletionGracePeriodSeconds_Call {
	return &MockObject_SetDeletionGracePeriodSeconds_Call{Call: _e.mock.On("SetDeletionGracePeriodSeconds", n)}
}

func (_c *MockObject_SetDeletionGracePeriodSeconds_Call) Run(run func(n *int64)) *MockObject_SetDeletionGracePeriodSeconds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *int64
		if args[0] != nil {
			arg0 = args[0].(*int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetDeletionGracePeriodSeconds_Call) Return() *MockObject_SetDeletionGracePeriodSeconds_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetDeletionGracePeriodSeconds_Call) RunAndReturn(run func(n *int64)) *MockObject_SetDeletionGracePeriodSeconds_Call {
	_c.Run(run)
	return _c
}

// SetDeletionTimestamp provides a mock function for the type MockObject
func (_mock *MockObject) SetDeletionTimestamp(timestamp *v1.Time) {
	_mock.Called(timestamp)
	return
}

// MockObject_SetDeletionTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeletionTimestamp'
type MockObject_SetDeletionTimestamp_Call struct {
	*mock.Call
}

// SetDeletionTimestamp is a helper method to define mock.On call
//   - timestamp *v1.Time
func (_e *MockObject_Expecter) SetDeletionTimestamp(timestamp interface{}) *MockObject_SetDeletionTimestamp_Call {
	return &MockObject_SetDeletionTimestamp_Call{Call: _e.mock.On("SetDeletionTimestamp", timestamp)}
}

func (_c *MockObject_SetDeletionTimestamp_Call) Run(run func(timestamp *v1.Time)) *MockObject_SetDeletionTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *v1.Time
		if args[0] != nil {
			arg0 = args[0].(*v1.Time)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetDeletionTimestamp_Call) Return() *MockObject_SetDeletionTimestamp_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetDeletionTimestamp_Call) RunAndReturn(run func(timestamp *v1.Time)) *MockObject_SetDeletionTimestamp_Call {
	_c.Run(run)
	return _c
}

// SetFinalizers provides a mock function for the type MockObject
func (_mock *MockObject) SetFinalizers(finalizers []string) {
	_mock.Called(finalizers)
	return
}

// MockObject_SetFinalizers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFinalizers'
type MockObject_SetFinalizers_Call struct {
	*mock.Call
}

// SetFinalizers is a helper method to define mock.On call
//   - finalizers []string
func (_e *MockObject_Expecter) SetFinalizers(finalizers interface{}) *MockObject_SetFinalizers_Call {
	return &MockObject_SetFinalizers_Call{Call: _e.mock.On("SetFinalizers", finalizers)}
}

func (_c *MockObject_SetFinalizers_Call) Run(run func(finalizers []string)) *MockObject_SetFinalizers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetFinalizers_Call) Return() *MockObject_SetFinalizers_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetFinalizers_Call) RunAndReturn(run func(finalizers []string)) *MockObject_SetFinalizers_Call {
	_c.Run(run)
	return _c
}

// SetGenerateName provides a mock function for the type MockObject
func (_mock *MockObject) SetGenerateName(name string) {
	_mock.Called(name)
	return
}

// MockObject_SetGenerateName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGenerateName'
type MockObject_SetGenerateName_Call struct {
	*mock.Call
}

// SetGenerateName is a helper method to define mock.On call
//   - name string
func (_e *MockObject_Expecter) SetGenerateName(name interface{}) *MockObject_SetGenerateName_Call {
	return &MockObject_SetGenerateName_Call{Call: _e.mock.On("SetGenerateName", name)}
}

func (_c *MockObject_SetGenerateName_Call) Run(run func(name string)) *MockObject_SetGenerateName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetGenerateName_Call) Return() *MockObject_SetGenerateName_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetGenerateName_Call) RunAndReturn(run func(name string)) *MockObject_SetGenerateName_Call {
	_c.Run(run)
	return _c
}

// SetGeneration provides a mock function for the type MockObject
func (_mock *MockObject) SetGeneration(generation int64) {
	_mock.Called(generation)
	return
}

// MockObject_SetGeneration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGeneration'
type MockObject_SetGeneration_Call struct {
	*mock.Call
}

// SetGeneration is a helper method to define mock.On call
//   - generation int64
func (_e *MockObject_Expecter) SetGeneration(generation interface{}) *MockObject_SetGeneration_Call {
	return &MockObject_SetGeneration_Call{Call: _e.mock.On("SetGeneration", generation)}
}

func (_c *MockObject_SetGeneration_Call) Run(run func(generation int64)) *MockObject_SetGeneration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetGeneration_Call) Return() *MockObject_SetGeneration_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetGeneration_Call) RunAndReturn(run func(generation int64)) *MockObject_SetGeneration_Call {
	_c.Run(run)
	return _c
}

// SetLabels provides a mock function for the type MockObject
func (_mock *MockObject) SetLabels(labels map[string]string) {
	_mock.Called(labels)
	return
}

// MockObject_SetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLabels'
type MockObject_SetLabels_Call struct {
	*mock.Call
}

// SetLabels is a helper method to define mock.On call
//   - labels map[string]string
func (_e *MockObject_Expecter) SetLabels(labels interface{}) *MockObject_SetLabels_Call {
	return &MockObject_SetLabels_Call{Call: _e.mock.On("SetLabels", labels)}
}

func (_c *MockObject_SetLabels_Call) Run(run func(labels map[string]string)) *MockObject_SetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]string
		if args[0] != nil {
			arg0 = args[0].(map[string]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetLabels_Call) Return() *MockObject_SetLabels_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetLabels_Call) RunAndReturn(run func(labels map[string]string)) *MockObject_SetLabels_Call {
	_c.Run(run)
	return _c
}

// SetManagedFields provides a mock function for the type MockObject
func (_mock *MockObject) SetManagedFields(managedFields []v1.ManagedFieldsEntry) {
	_mock.Called(managedFields)
	return
}

// MockObject_SetManagedFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetManagedFields'
type MockObject_SetManagedFields_Call struct {
	*mock.Call
}

// SetManagedFields is a helper method to define mock.On call
//   - managedFields []v1.ManagedFieldsEntry
func (_e *MockObject_Expecter) SetManagedFields(managedFields interface{}) *MockObject_SetManagedFields_Call {
	return &MockObject_SetManagedFields_Call{Call: _e.mock.On("SetManagedFields", managedFields)}
}

func (_c *MockObject_SetManagedFields_Call) Run(run func(managedFields []v1.ManagedFieldsEntry)) *MockObject_SetManagedFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []v1.ManagedFieldsEntry
		if args[0] != nil {
			arg0 = args[0].([]v1.ManagedFieldsEntry)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetManagedFields_Call) Return() *MockObject_SetManagedFields_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetManagedFields_Call) RunAndReturn(run func(managedFields []v1.ManagedFieldsEntry)) *MockObject_SetManagedFields_Call {
	_c.Run(run)
	return _c
}

// SetName provides a mock function for the type MockObject
func (_mock *MockObject) SetName(name string) {
	_mock.Called(name)
	return
}

// MockObject_SetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetName'
type MockObject_SetName_Call struct {
	*mock.Call
}

// SetName is a helper method to define mock.On call
//   - name string
func (_e *MockObject_Expecter) SetName(name interface{}) *MockObject_SetName_Call {
	return &MockObject_SetName_Call{Call: _e.mock.On("SetName", name)}
}

func (_c *MockObject_SetName_Call) Run(run func(name string)) *MockObject_SetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetName_Call) Return() *MockObject_SetName_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetName_Call) RunAndReturn(run func(name string)) *MockObject_SetName_Call {
	_c.Run(run)
	return _c
}

// SetNamespace provides a mock function for the type MockObject
func (_mock *MockObject) SetNamespace(namespace string) {
	_mock.Called(namespace)
	return
}

// MockObject_SetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNamespace'
type MockObject_SetNamespace_Call struct {
	*mock.Call
}

// SetNamespace is a helper method to define mock.On call
//   - namespace string
func (_e *MockObject_Expecter) SetNamespace(namespace interface{}) *MockObject_SetNamespace_Call {
	return &MockObject_SetNamespace_Call{Call: _e.mock.On("SetNamespace", namespace)}
}

func (_c *MockObject_SetNamespace_Call) Run(run func(namespace string)) *MockObject_SetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetNamespace_Call) Return() *MockObject_SetNamespace_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetNamespace_Call) RunAndReturn(run func(namespace string)) *MockObject_SetNamespace_Call {
	_c.Run(run)
	return _c
}

// SetOwnerReferences provides a mock function for the type MockObject
func (_mock *MockObject) SetOwnerReferences(ownerReferences []v1.OwnerReference) {
	_mock.Called(ownerReferences)
	return
}

// MockObject_SetOwnerReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOwnerReferences'
type MockObject_SetOwnerReferences_Call struct {
	*mock.Call
}

// SetOwnerReferences is a helper method to define mock.On call
//   - ownerReferences []v1.OwnerReference
func (_e *MockObject_Expecter) SetOwnerReferences(ownerReferences interface{}) *MockObject_SetOwnerReferences_Call {
	return &MockObject_SetOwnerReferences_Call{Call: _e.mock.On("SetOwnerReferences", ownerReferences)}
}

func (_c *MockObject_SetOwnerReferences_Call) Run(run func(ownerReferences []v1.OwnerReference)) *MockObject_SetOwnerReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []v1.OwnerReference
		if args[0] != nil {
			arg0 = args[0].([]v1.OwnerReference)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetOwnerReferences_Call) Return() *MockObject_SetOwnerReferences_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetOwnerReferences_Call) RunAndReturn(run func(ownerReferences []v1.OwnerReference)) *MockObject_SetOwnerReferences_Call {
	_c.Run(run)
	return _c
}

// SetResourceVersion provides a mock function for the type MockObject
func (_mock *MockObject) SetResourceVersion(version string) {
	_mock.Called(version)
	return
}

// MockObject_SetResourceVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResourceVersion'
type MockObject_SetResourceVersion_Call struct {
	*mock.Call
}

// SetResourceVersion is a helper method to define mock.On call
//   - version string
func (_e *MockObject_Expecter) SetResourceVersion(version interface{}) *MockObject_SetResourceVersion_Call {
	return &MockObject_SetResourceVersion_Call{Call: _e.mock.On("SetResourceVersion", version)}
}

func (_c *MockObject_SetResourceVersion_Call) Run(run func(version string)) *MockObject_SetResourceVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetResourceVersion_Call) Return() *MockObject_SetResourceVersion_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetResourceVersion_Call) RunAndReturn(run func(version string)) *MockObject_SetResourceVersion_Call {
	_c.Run(run)
	return _c
}

// SetSelfLink provides a mock function for the type MockObject
func (_mock *MockObject) SetSelfLink(selfLink string) {
	_mock.Called(selfLink)
	return
}

// MockObject_SetSelfLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSelfLink'
type MockObject_SetSelfLink_Call struct {
	*mock.Call
}

// SetSelfLink is a helper method to define mock.On call
//   - selfLink string
func (_e *MockObject_Expecter) SetSelfLink(selfLink interface{}) *MockObject_SetSelfLink_Call {
	return &MockObject_SetSelfLink_Call{Call: _e.mock.On("SetSelfLink", selfLink)}
}

func (_c *MockObject_SetSelfLink_Call) Run(run func(selfLink string)) *MockObject_SetSelfLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetSelfLink_Call) Return() *MockObject_SetSelfLink_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetSelfLink_Call) RunAndReturn(run func(selfLink string)) *MockObject_SetSelfLink_Call {
	_c.Run(run)
	return _c
}

// SetUID provides a mock function for the type MockObject
func (_mock *MockObject) SetUID(uid types.UID) {
	_mock.Called(uid)
	return
}

// MockObject_SetUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUID'
type MockObject_SetUID_Call struct {
	*mock.Call
}

// SetUID is a helper method to define mock.On call
//   - uid types.UID
func (_e *MockObject_Expecter) SetUID(uid interface{}) *MockObject_SetUID_Call {
	return &MockObject_SetUID_Call{Call: _e.mock.On("SetUID", uid)}
}

func (_c *MockObject_SetUID_Call) Run(run func(uid types.UID)) *MockObject_SetUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.UID
		if args[0] != nil {
			arg0 = args[0].(types.UID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObject_SetUID_Call) Return() *MockObject_SetUID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObject_SetUID_Call) RunAndReturn(run func(uid types.UID)) *MockObject_SetUID_Call {
	_c.Run(run)
	return _c
}
