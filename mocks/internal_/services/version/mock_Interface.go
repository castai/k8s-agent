// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package version

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// Full provides a mock function for the type MockInterface
func (_mock *MockInterface) Full() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Full")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockInterface_Full_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Full'
type MockInterface_Full_Call struct {
	*mock.Call
}

// Full is a helper method to define mock.On call
func (_e *MockInterface_Expecter) Full() *MockInterface_Full_Call {
	return &MockInterface_Full_Call{Call: _e.mock.On("Full")}
}

func (_c *MockInterface_Full_Call) Run(run func()) *MockInterface_Full_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_Full_Call) Return(s string) *MockInterface_Full_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockInterface_Full_Call) RunAndReturn(run func() string) *MockInterface_Full_Call {
	_c.Call.Return(run)
	return _c
}

// MinorInt provides a mock function for the type MockInterface
func (_mock *MockInterface) MinorInt() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MinorInt")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockInterface_MinorInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MinorInt'
type MockInterface_MinorInt_Call struct {
	*mock.Call
}

// MinorInt is a helper method to define mock.On call
func (_e *MockInterface_Expecter) MinorInt() *MockInterface_MinorInt_Call {
	return &MockInterface_MinorInt_Call{Call: _e.mock.On("MinorInt")}
}

func (_c *MockInterface_MinorInt_Call) Run(run func()) *MockInterface_MinorInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_MinorInt_Call) Return(n int) *MockInterface_MinorInt_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockInterface_MinorInt_Call) RunAndReturn(run func() int) *MockInterface_MinorInt_Call {
	_c.Call.Return(run)
	return _c
}
