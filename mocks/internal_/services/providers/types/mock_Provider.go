// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package types

import (
	"castai-agent/internal/castai"
	"castai-agent/internal/services/providers/types"
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/api/core/v1"
)

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// FilterSpot provides a mock function for the type MockProvider
func (_mock *MockProvider) FilterSpot(ctx context.Context, nodes []*v1.Node) ([]*v1.Node, error) {
	ret := _mock.Called(ctx, nodes)

	if len(ret) == 0 {
		panic("no return value specified for FilterSpot")
	}

	var r0 []*v1.Node
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*v1.Node) ([]*v1.Node, error)); ok {
		return returnFunc(ctx, nodes)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*v1.Node) []*v1.Node); ok {
		r0 = returnFunc(ctx, nodes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Node)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []*v1.Node) error); ok {
		r1 = returnFunc(ctx, nodes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvider_FilterSpot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterSpot'
type MockProvider_FilterSpot_Call struct {
	*mock.Call
}

// FilterSpot is a helper method to define mock.On call
//   - ctx context.Context
//   - nodes []*v1.Node
func (_e *MockProvider_Expecter) FilterSpot(ctx interface{}, nodes interface{}) *MockProvider_FilterSpot_Call {
	return &MockProvider_FilterSpot_Call{Call: _e.mock.On("FilterSpot", ctx, nodes)}
}

func (_c *MockProvider_FilterSpot_Call) Run(run func(ctx context.Context, nodes []*v1.Node)) *MockProvider_FilterSpot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*v1.Node
		if args[1] != nil {
			arg1 = args[1].([]*v1.Node)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProvider_FilterSpot_Call) Return(nodes1 []*v1.Node, err error) *MockProvider_FilterSpot_Call {
	_c.Call.Return(nodes1, err)
	return _c
}

func (_c *MockProvider_FilterSpot_Call) RunAndReturn(run func(ctx context.Context, nodes []*v1.Node) ([]*v1.Node, error)) *MockProvider_FilterSpot_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockProvider
func (_mock *MockProvider) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockProvider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockProvider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Name() *MockProvider_Name_Call {
	return &MockProvider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockProvider_Name_Call) Run(run func()) *MockProvider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Name_Call) Return(s string) *MockProvider_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockProvider_Name_Call) RunAndReturn(run func() string) *MockProvider_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCluster provides a mock function for the type MockProvider
func (_mock *MockProvider) RegisterCluster(ctx context.Context, client castai.Client) (*types.ClusterRegistration, error) {
	ret := _mock.Called(ctx, client)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCluster")
	}

	var r0 *types.ClusterRegistration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, castai.Client) (*types.ClusterRegistration, error)); ok {
		return returnFunc(ctx, client)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, castai.Client) *types.ClusterRegistration); ok {
		r0 = returnFunc(ctx, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ClusterRegistration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, castai.Client) error); ok {
		r1 = returnFunc(ctx, client)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProvider_RegisterCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCluster'
type MockProvider_RegisterCluster_Call struct {
	*mock.Call
}

// RegisterCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - client castai.Client
func (_e *MockProvider_Expecter) RegisterCluster(ctx interface{}, client interface{}) *MockProvider_RegisterCluster_Call {
	return &MockProvider_RegisterCluster_Call{Call: _e.mock.On("RegisterCluster", ctx, client)}
}

func (_c *MockProvider_RegisterCluster_Call) Run(run func(ctx context.Context, client castai.Client)) *MockProvider_RegisterCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 castai.Client
		if args[1] != nil {
			arg1 = args[1].(castai.Client)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProvider_RegisterCluster_Call) Return(clusterRegistration *types.ClusterRegistration, err error) *MockProvider_RegisterCluster_Call {
	_c.Call.Return(clusterRegistration, err)
	return _c
}

func (_c *MockProvider_RegisterCluster_Call) RunAndReturn(run func(ctx context.Context, client castai.Client) (*types.ClusterRegistration, error)) *MockProvider_RegisterCluster_Call {
	_c.Call.Return(run)
	return _c
}
