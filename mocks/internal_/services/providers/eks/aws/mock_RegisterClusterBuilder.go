// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package aws

import (
	"castai-agent/internal/castai"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRegisterClusterBuilder creates a new instance of MockRegisterClusterBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterClusterBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterClusterBuilder {
	mock := &MockRegisterClusterBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegisterClusterBuilder is an autogenerated mock type for the RegisterClusterBuilder type
type MockRegisterClusterBuilder struct {
	mock.Mock
}

type MockRegisterClusterBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegisterClusterBuilder) EXPECT() *MockRegisterClusterBuilder_Expecter {
	return &MockRegisterClusterBuilder_Expecter{mock: &_m.Mock}
}

// BuildRegisterClusterRequest provides a mock function for the type MockRegisterClusterBuilder
func (_mock *MockRegisterClusterBuilder) BuildRegisterClusterRequest(ctx context.Context) (*castai.RegisterClusterRequest, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BuildRegisterClusterRequest")
	}

	var r0 *castai.RegisterClusterRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*castai.RegisterClusterRequest, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *castai.RegisterClusterRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*castai.RegisterClusterRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRegisterClusterBuilder_BuildRegisterClusterRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildRegisterClusterRequest'
type MockRegisterClusterBuilder_BuildRegisterClusterRequest_Call struct {
	*mock.Call
}

// BuildRegisterClusterRequest is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRegisterClusterBuilder_Expecter) BuildRegisterClusterRequest(ctx interface{}) *MockRegisterClusterBuilder_BuildRegisterClusterRequest_Call {
	return &MockRegisterClusterBuilder_BuildRegisterClusterRequest_Call{Call: _e.mock.On("BuildRegisterClusterRequest", ctx)}
}

func (_c *MockRegisterClusterBuilder_BuildRegisterClusterRequest_Call) Run(run func(ctx context.Context)) *MockRegisterClusterBuilder_BuildRegisterClusterRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRegisterClusterBuilder_BuildRegisterClusterRequest_Call) Return(registerClusterRequest *castai.RegisterClusterRequest, err error) *MockRegisterClusterBuilder_BuildRegisterClusterRequest_Call {
	_c.Call.Return(registerClusterRequest, err)
	return _c
}

func (_c *MockRegisterClusterBuilder_BuildRegisterClusterRequest_Call) RunAndReturn(run func(ctx context.Context) (*castai.RegisterClusterRequest, error)) *MockRegisterClusterBuilder_BuildRegisterClusterRequest_Call {
	_c.Call.Return(run)
	return _c
}
