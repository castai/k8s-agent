// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package client

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockMetadata creates a new instance of MockMetadata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetadata(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetadata {
	mock := &MockMetadata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetadata is an autogenerated mock type for the Metadata type
type MockMetadata struct {
	mock.Mock
}

type MockMetadata_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetadata) EXPECT() *MockMetadata_Expecter {
	return &MockMetadata_Expecter{mock: &_m.Mock}
}

// GetClusterName provides a mock function for the type MockMetadata
func (_mock *MockMetadata) GetClusterName() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterName")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetadata_GetClusterName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterName'
type MockMetadata_GetClusterName_Call struct {
	*mock.Call
}

// GetClusterName is a helper method to define mock.On call
func (_e *MockMetadata_Expecter) GetClusterName() *MockMetadata_GetClusterName_Call {
	return &MockMetadata_GetClusterName_Call{Call: _e.mock.On("GetClusterName")}
}

func (_c *MockMetadata_GetClusterName_Call) Run(run func()) *MockMetadata_GetClusterName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetadata_GetClusterName_Call) Return(s string, err error) *MockMetadata_GetClusterName_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMetadata_GetClusterName_Call) RunAndReturn(run func() (string, error)) *MockMetadata_GetClusterName_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocation provides a mock function for the type MockMetadata
func (_mock *MockMetadata) GetLocation() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLocation")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetadata_GetLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocation'
type MockMetadata_GetLocation_Call struct {
	*mock.Call
}

// GetLocation is a helper method to define mock.On call
func (_e *MockMetadata_Expecter) GetLocation() *MockMetadata_GetLocation_Call {
	return &MockMetadata_GetLocation_Call{Call: _e.mock.On("GetLocation")}
}

func (_c *MockMetadata_GetLocation_Call) Run(run func()) *MockMetadata_GetLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetadata_GetLocation_Call) Return(s string, err error) *MockMetadata_GetLocation_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMetadata_GetLocation_Call) RunAndReturn(run func() (string, error)) *MockMetadata_GetLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectID provides a mock function for the type MockMetadata
func (_mock *MockMetadata) GetProjectID() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProjectID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetadata_GetProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectID'
type MockMetadata_GetProjectID_Call struct {
	*mock.Call
}

// GetProjectID is a helper method to define mock.On call
func (_e *MockMetadata_Expecter) GetProjectID() *MockMetadata_GetProjectID_Call {
	return &MockMetadata_GetProjectID_Call{Call: _e.mock.On("GetProjectID")}
}

func (_c *MockMetadata_GetProjectID_Call) Run(run func()) *MockMetadata_GetProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetadata_GetProjectID_Call) Return(s string, err error) *MockMetadata_GetProjectID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMetadata_GetProjectID_Call) RunAndReturn(run func() (string, error)) *MockMetadata_GetProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegion provides a mock function for the type MockMetadata
func (_mock *MockMetadata) GetRegion() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRegion")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetadata_GetRegion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegion'
type MockMetadata_GetRegion_Call struct {
	*mock.Call
}

// GetRegion is a helper method to define mock.On call
func (_e *MockMetadata_Expecter) GetRegion() *MockMetadata_GetRegion_Call {
	return &MockMetadata_GetRegion_Call{Call: _e.mock.On("GetRegion")}
}

func (_c *MockMetadata_GetRegion_Call) Run(run func()) *MockMetadata_GetRegion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetadata_GetRegion_Call) Return(s string, err error) *MockMetadata_GetRegion_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMetadata_GetRegion_Call) RunAndReturn(run func() (string, error)) *MockMetadata_GetRegion_Call {
	_c.Call.Return(run)
	return _c
}
