// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package castai

import (
	"castai-agent/internal/castai"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// ExchangeAgentTelemetry provides a mock function for the type MockClient
func (_mock *MockClient) ExchangeAgentTelemetry(ctx context.Context, clusterID string, req *castai.AgentTelemetryRequest) (*castai.AgentTelemetryResponse, error) {
	ret := _mock.Called(ctx, clusterID, req)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeAgentTelemetry")
	}

	var r0 *castai.AgentTelemetryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *castai.AgentTelemetryRequest) (*castai.AgentTelemetryResponse, error)); ok {
		return returnFunc(ctx, clusterID, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *castai.AgentTelemetryRequest) *castai.AgentTelemetryResponse); ok {
		r0 = returnFunc(ctx, clusterID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*castai.AgentTelemetryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *castai.AgentTelemetryRequest) error); ok {
		r1 = returnFunc(ctx, clusterID, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ExchangeAgentTelemetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeAgentTelemetry'
type MockClient_ExchangeAgentTelemetry_Call struct {
	*mock.Call
}

// ExchangeAgentTelemetry is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterID string
//   - req *castai.AgentTelemetryRequest
func (_e *MockClient_Expecter) ExchangeAgentTelemetry(ctx interface{}, clusterID interface{}, req interface{}) *MockClient_ExchangeAgentTelemetry_Call {
	return &MockClient_ExchangeAgentTelemetry_Call{Call: _e.mock.On("ExchangeAgentTelemetry", ctx, clusterID, req)}
}

func (_c *MockClient_ExchangeAgentTelemetry_Call) Run(run func(ctx context.Context, clusterID string, req *castai.AgentTelemetryRequest)) *MockClient_ExchangeAgentTelemetry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *castai.AgentTelemetryRequest
		if args[2] != nil {
			arg2 = args[2].(*castai.AgentTelemetryRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockClient_ExchangeAgentTelemetry_Call) Return(agentTelemetryResponse *castai.AgentTelemetryResponse, err error) *MockClient_ExchangeAgentTelemetry_Call {
	_c.Call.Return(agentTelemetryResponse, err)
	return _c
}

func (_c *MockClient_ExchangeAgentTelemetry_Call) RunAndReturn(run func(ctx context.Context, clusterID string, req *castai.AgentTelemetryRequest) (*castai.AgentTelemetryResponse, error)) *MockClient_ExchangeAgentTelemetry_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCluster provides a mock function for the type MockClient
func (_mock *MockClient) RegisterCluster(ctx context.Context, req *castai.RegisterClusterRequest) (*castai.RegisterClusterResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCluster")
	}

	var r0 *castai.RegisterClusterResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *castai.RegisterClusterRequest) (*castai.RegisterClusterResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *castai.RegisterClusterRequest) *castai.RegisterClusterResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*castai.RegisterClusterResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *castai.RegisterClusterRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_RegisterCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCluster'
type MockClient_RegisterCluster_Call struct {
	*mock.Call
}

// RegisterCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - req *castai.RegisterClusterRequest
func (_e *MockClient_Expecter) RegisterCluster(ctx interface{}, req interface{}) *MockClient_RegisterCluster_Call {
	return &MockClient_RegisterCluster_Call{Call: _e.mock.On("RegisterCluster", ctx, req)}
}

func (_c *MockClient_RegisterCluster_Call) Run(run func(ctx context.Context, req *castai.RegisterClusterRequest)) *MockClient_RegisterCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *castai.RegisterClusterRequest
		if args[1] != nil {
			arg1 = args[1].(*castai.RegisterClusterRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_RegisterCluster_Call) Return(registerClusterResponse *castai.RegisterClusterResponse, err error) *MockClient_RegisterCluster_Call {
	_c.Call.Return(registerClusterResponse, err)
	return _c
}

func (_c *MockClient_RegisterCluster_Call) RunAndReturn(run func(ctx context.Context, req *castai.RegisterClusterRequest) (*castai.RegisterClusterResponse, error)) *MockClient_RegisterCluster_Call {
	_c.Call.Return(run)
	return _c
}

// SendDelta provides a mock function for the type MockClient
func (_mock *MockClient) SendDelta(ctx context.Context, clusterID string, delta *castai.Delta) error {
	ret := _mock.Called(ctx, clusterID, delta)

	if len(ret) == 0 {
		panic("no return value specified for SendDelta")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *castai.Delta) error); ok {
		r0 = returnFunc(ctx, clusterID, delta)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_SendDelta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDelta'
type MockClient_SendDelta_Call struct {
	*mock.Call
}

// SendDelta is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterID string
//   - delta *castai.Delta
func (_e *MockClient_Expecter) SendDelta(ctx interface{}, clusterID interface{}, delta interface{}) *MockClient_SendDelta_Call {
	return &MockClient_SendDelta_Call{Call: _e.mock.On("SendDelta", ctx, clusterID, delta)}
}

func (_c *MockClient_SendDelta_Call) Run(run func(ctx context.Context, clusterID string, delta *castai.Delta)) *MockClient_SendDelta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *castai.Delta
		if args[2] != nil {
			arg2 = args[2].(*castai.Delta)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockClient_SendDelta_Call) Return(err error) *MockClient_SendDelta_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_SendDelta_Call) RunAndReturn(run func(ctx context.Context, clusterID string, delta *castai.Delta) error) *MockClient_SendDelta_Call {
	_c.Call.Return(run)
	return _c
}

// SendLogEvent provides a mock function for the type MockClient
func (_mock *MockClient) SendLogEvent(ctx context.Context, clusterID string, req *castai.IngestAgentLogsRequest) (*castai.IngestAgentLogsResponse, error) {
	ret := _mock.Called(ctx, clusterID, req)

	if len(ret) == 0 {
		panic("no return value specified for SendLogEvent")
	}

	var r0 *castai.IngestAgentLogsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *castai.IngestAgentLogsRequest) (*castai.IngestAgentLogsResponse, error)); ok {
		return returnFunc(ctx, clusterID, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *castai.IngestAgentLogsRequest) *castai.IngestAgentLogsResponse); ok {
		r0 = returnFunc(ctx, clusterID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*castai.IngestAgentLogsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *castai.IngestAgentLogsRequest) error); ok {
		r1 = returnFunc(ctx, clusterID, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_SendLogEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendLogEvent'
type MockClient_SendLogEvent_Call struct {
	*mock.Call
}

// SendLogEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterID string
//   - req *castai.IngestAgentLogsRequest
func (_e *MockClient_Expecter) SendLogEvent(ctx interface{}, clusterID interface{}, req interface{}) *MockClient_SendLogEvent_Call {
	return &MockClient_SendLogEvent_Call{Call: _e.mock.On("SendLogEvent", ctx, clusterID, req)}
}

func (_c *MockClient_SendLogEvent_Call) Run(run func(ctx context.Context, clusterID string, req *castai.IngestAgentLogsRequest)) *MockClient_SendLogEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *castai.IngestAgentLogsRequest
		if args[2] != nil {
			arg2 = args[2].(*castai.IngestAgentLogsRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockClient_SendLogEvent_Call) Return(ingestAgentLogsResponse *castai.IngestAgentLogsResponse, err error) *MockClient_SendLogEvent_Call {
	_c.Call.Return(ingestAgentLogsResponse, err)
	return _c
}

func (_c *MockClient_SendLogEvent_Call) RunAndReturn(run func(ctx context.Context, clusterID string, req *castai.IngestAgentLogsRequest) (*castai.IngestAgentLogsResponse, error)) *MockClient_SendLogEvent_Call {
	_c.Call.Return(run)
	return _c
}
